<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">

  <PropertyGroup>
    <NuGetPath Condition=" '$(NuGetPath)' == '' ">$(MSBuildThisFileDirectory).nuget</NuGetPath>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' ">
    <NuGet Condition=" '$(NuGet)' == '' ">$(NuGetPath)\NuGet.exe</NuGet>
    <CachedNuGet Condition=" '$(CachedNuGet)' == '' ">$(LocalAppData)\NuGet\NuGet.exe</CachedNuGet>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' ">
    <NuGet>nuget</NuGet>
  </PropertyGroup>

  <!-- Add current solution as one more solution to restore -->
  <ItemGroup>
    <RestoreSolution Include="$(SolutionPath)" Condition=" '$(SolutionPath)' != '' " />
  </ItemGroup>
  
  <ItemDefinitionGroup>
    <RestoreSolution>
      <Command>Restore</Command>
      <Args></Args>
    </RestoreSolution>
  </ItemDefinitionGroup>

  <Target Name="RestorePackages" BeforeTargets="Build"
          DependsOnTargets="_GetNuGet;EnsureBeforeSolutionImport;RestoreSolutions"
          Condition=" '$(RestorePackages)' != 'false' " />

  <Target Name="EnsureBeforeSolutionImport">
    <Error Text="This targets file should ONLY be imported from a file named Before.$(SolutionFileName).targets alongside the solution file."
				Condition="!$(MSBuildProjectFile.Contains('$(SolutionFileName)'))" />
  </Target>

  <Target Name="RestoreSolutions" Inputs="@(RestoreSolution)" Outputs="%(RestoreSolution.Identity)-BATCH">
    <PropertyGroup>
      <!-- The base restore directory can be overriden via the Before.*.targets file, but we default to the solution path, like NuGet does -->
      <RestoreDir Condition=" '$(RestoreDir)' == '' And '$(SolutionPath)' != '' ">$([System.IO.Path]::GetDirectoryName('$(SolutionPath)'))</RestoreDir>
    </PropertyGroup>  
  
    <PropertyGroup>
      <!-- Normalizes paths to all be relative to the RestoreDir, to shorten the Exec Command length -->
      <_NuGet>$(NuGet.Replace('$(RestoreDir)', '').TrimStart('/').TrimStart('\'))</_NuGet>
    </PropertyGroup>
    
    <CreateProperty Value="%(RestoreSolution.Command)">
      <Output PropertyName="_RestoreCommand" TaskParameter="Value" />
    </CreateProperty>
    <CreateProperty Value="%(RestoreSolution.FullPath)">
      <Output PropertyName="_RestoreSolution" TaskParameter="Value" />
    </CreateProperty>
    <CreateProperty Value="%(RestoreSolution.OutputDirectory)">
      <Output PropertyName="_RestoreOutput" TaskParameter="Value" />
    </CreateProperty>
    <CreateProperty Value="%(RestoreSolution.Args)">
      <Output PropertyName="_RestoreArgs" TaskParameter="Value" />
    </CreateProperty>

    <PropertyGroup>
      <_RestoreSolution Condition=" '$(OS)' != 'Unix' ">$(_RestoreSolution.Replace('$(RestoreDir)', '').TrimStart('/').TrimStart('\'))</_RestoreSolution>
      <_RestoreOutput Condition=" '$(OS)' != 'Unix' And '$(_RestoreOutput)' != ''">$(_RestoreOutput.Replace('$(RestoreDir)', '').TrimStart('/').TrimStart('\'))</_RestoreOutput>
      <!-- The default value from ItemDefinitionGroup isn't being honored by xbuild, sigh :( -->
      <_RestoreCommand Condition=" '$(_RestoreCommand)' == '' ">Restore</_RestoreCommand>
    </PropertyGroup>

    <Exec Command='"$(_NuGet)" $(_RestoreCommand) "$(_RestoreSolution)" $(_RestoreArgs)'
          Condition="'$(_RestoreOutput)' == ''"
          WorkingDirectory="$(RestoreDir)" />

    <Exec Command='"$(_NuGet)" $(_RestoreCommand) "$(_RestoreSolution)" -OutputDirectory "$(_RestoreOutput)" $(_RestoreArgs)'
          Condition="'$(_RestoreOutput)' != ''"
          WorkingDirectory="$(RestoreDir)" />
  </Target>


  <Target Name="_GetNuGet" Condition=" '$(OS)' == 'Windows_NT' And !Exists('$(NuGet)') ">
    <PropertyGroup>
      <PowerShell Condition=" '$(PowerShell)' == '' ">%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShell>
    </PropertyGroup>

    <MakeDir Directories="$(NuGetPath)" Condition=" !Exists($(NuGetPath)) " />
    <MakeDir Directories="$(LocalAppData)\NuGet" Condition=" !Exists('$(LocalAppData)\NuGet') " />    
    <Exec Command="&quot;$(PowerShell)&quot; -Command &quot;&amp; { (New-Object System.Net.WebClient).DownloadFile('https://dist.nuget.org/win-x86-commandline/v3.3.0/nuget.exe', '$(CachedNuGet)') }&quot;"
          Condition=" !Exists($(NuGet)) And !Exists($(CachedNuGet)) " />
    <Copy SourceFiles="$(CachedNuGet)" DestinationFolder="$(NuGetPath)" Condition="!Exists($(NuGet))" />
    <Exec Command='"$(NuGet)" Update -Self' ContinueOnError='true' />  	  
  </Target>

</Project>
